#!/bin/bash

# print command line usage syntax
function usage {
	local cmd=`basename $0`
	echo "
Usage:

  The CodeStream On-Prem Administration Guide is here:

    https//docs.codestream.com/onprem/

  QuickStart
    $cmd --quickstart [--public-host <hostname-or-ip>] [--api-port <port>] \\
                            [--bcast-port <port>] [--admin-port <port>] [--mongo-url <url>]

  Container Control
    $cmd { --start | --stop | --restart | --reset | --status } [--not-mongo]
    $cmd --start-mongo                                      # start the mongo container only

  Updates & Backups
    $cmd --update-myself                                    # update the codestream control script and utilities
    $cmd --update-containers [--no-start] [--no-backup]     # grab latest container versions (performs backup)
    $cmd --backup                                           # backup mongo database
    $cmd --restore { latest | <file> }                      # restore mongo database from latest backup or <file>
    $cmd --full-backup                                      # backup mongo and the entire configuration directory

  Maintenance and Support
    $cmd --logs { Nh | Nm }                                 # collect last N hours or minutes of logs
    $cmd --apply-support-pkg <support-pkg>                  # apply the codestream-provided support package
    $cmd --create-mst-app-pkg <app-id> <public-api-host>    # create a custom MST App Package
    $cmd --repair-db <repair-script.js>                     # run mongo repair commands
    $cmd --run-api-utility <script>                         # run an api utility in the API container
    $cmd --run-support-script <script>                      # run a support script located in $CS_ROOT/support/
    $cmd --undo-stack                                       # print the undo stack
    $cmd --run-python-script <script> <opts>                # run a python script using the codestream python container
    $cmd --make-self-signed-cert <hostName>                 # create a key and self-signed SSL certificate (requires openssl)
    $cmd --api-shell                                        # shell prompt in api container
    $cmd --cfg-tool [options]                               # run mongo config loader tool

        >>>  mongo data _should_ persist following a mongo container reset, but  <<<
        >>>  make sure you back up the data with '--backup' beforehand.          <<<

    Note: touch 'mongo.off' if you're providing your own mongo db and don't want
    to run the mongodb docker container included here.
"
	exit 1
}

############################################################
## Core utility functions
############################################################

# prompt for a yes or no answer to a question
#
# args:
#    prompt     message to display
# returns:
#    0   no
#    1   yes
function yesno {
	local prompt=$1
	local ans
	echo -n "$prompt"
	read ans
	while [ "$ans" != "y" -a "$ans" != "n" ]; do
		echo -n "y or n ? "
		read ans
	done
	[ $ans == "y" ] && return 1
	return 0
}

# generate a random string of characters of specified length (relies on /dev/urandom)
function random_string {
	local strLen=$1
	[ ! -c /dev/urandom ] && echo "the /dev/urandom device was not found - cannot generate a random string" && exit 1
	[ -z "$strLen" ] && strLen=18
	head /dev/urandom | $TR_CMD -dc A-Za-z0-9 | head -c $strLen ; echo ''
}

# check for core commands this script needs to work
function check_env {
	local rc=0
	local cmd
	[ -z "$HOME" ] && echo "\$HOME is not defined" >&2 && rc=1
	for cmd in docker curl $TR_CMD touch
	do
		[ -z `which $cmd 2>/dev/null` ] && echo "'$cmd' command not found in search path" >&2 && rc=1
	done
	return $rc
}

function get_uuid {
	local uuid
	# curl -s https://www.uuidtools.com/api/decode/9084b876-4209-4e84-91d4-a7221c63ad65 | python3 -m json.tool
	[ -z "$CS_INSTALL_FROM_PKG" ] && uuid=$(curl -s https://www.uuidtools.com/api/generate/timestamp-first|cut -f2 -d'"') || uuid=$(cat $CS_ROOT/.UUID)
	[ -z "$uuid" ] && echo "unable to generate an installation ID" >&2 && exit 1
	echo $uuid
}



############################################################
## Updates
############################################################

# download designated utility scripts
# args:
#     force-flag       non-null string forces download of all utilities
function fetch_utilities {
	local force_fl="$1"
	if [ $CS_OPI_SANDBOX -eq 1 ]; then
		[ -z "`ls -d $CS_ROOT/util 2>/dev/null`" ] && echo "linking to $OPI_TOP/install-scripts/util" && ln -s $OPI_TOP/install-scripts/util $OPI_DATA/util
		echo "Running inside OPI sandbox. No fetch needed."
		return 0
	fi
	[ ! -d $CS_ROOT/util ] && mkdir $CS_ROOT/util
	for u in dt-merge-json
	do
		if [ ! -f $CS_ROOT/$u -o -n "$force_fl" ]; then
			# echo "Fetching $u ..."
			if [ -z "$CS_INSTALL_FROM_PKG" ]; then
				curl https://raw.githubusercontent.com/TeamCodeStream/onprem-install/$CS_INSTALLATION_BRANCH/install-scripts/util/$u -o $CS_ROOT/util/$u -s
				[ $? -ne 0 ] && echo "error fetching $u" && exit 1
			else
				cp $CS_ROOT/.onprem-install/install-scripts/util/$u $CS_ROOT/util/$u
				[ $? -ne 0 ] && echo "error copying $u from .onprem-install" && exit 1
			fi
			chmod 750 $CS_ROOT/util/$u
		fi
	done
}

# download the latest version of this script in place (then immediately exit)
function update_myself {
	[ $CS_OPI_SANDBOX -eq 1 ] && echo "Running inside OPI sandbox. Update git repo $OPI_TOP instead of --update-myself" && exit 0
	if [ -z "$CS_INSTALL_FROM_PKG" ]; then
		fetch_utilities --force
		(
			curl https://raw.githubusercontent.com/TeamCodeStream/onprem-install/$CS_INSTALLATION_BRANCH/install-scripts/codestream -o $CS_ROOT/codestream -s
			chmod +x $CS_ROOT/codestream
		)
		# this is special - WE GO NO FURTHER AFTER UPDATING OURSELF BECAUSE THE BASH INTERPRETER IS LIKELY TO BARF
	else
		echo "Running from a package update. --update_myself does not apply"
	fi
	exit 0
}

# update the file containing the container versions for this codestream release
# args:
#     undoId (optional)     for storing existing file(s) in the undo stack
# returns:
#      0   successfully updated
#      1   no update necessary
#      2   error during update
function update_container_versions {
	local undoId="$1"
	if [ -z "$CS_INSTALL_FROM_PKG" ]; then
		local versionUrl="https://raw.githubusercontent.com/TeamCodeStream/onprem-install/$CS_INSTALLATION_BRANCH/versions/preview-single-host.ver"
		curl -s --fail --output $CS_ROOT/container-versions.new "$versionUrl$CS_RELEASE_SUFX"
		[ $? -ne 0 ] && echo "Failed to download container versions ($versionUrl$CS_RELEASE_SUFX)" && return 2
	else
		local versionUrlFile=".onprem-install/versions/preview-single-host.ver"
		cp $CS_ROOT/$versionUrlFile$CS_RELEASE_SUFX $CS_ROOT/container-versions.new
		[ $? -ne 0 ] && echo "failed: cp $CS_ROOT/$versionUrlFile$CS_RELEASE_SUFX $CS_ROOT/container-versions.new" && return 2
	fi
	if [ ! -f $CS_ROOT/container-versions ]; then
		/bin/mv $CS_ROOT/container-versions.new $CS_ROOT/container-versions || return 2
		return 0
	fi
	x=`diff $CS_ROOT/container-versions.new $CS_ROOT/container-versions|wc -l`
	[ "$x" -eq 0 ] && /bin/rm -f $CS_ROOT/container-versions.new && return 1
	[ -z "$undoId" ] && undoId=$(undo_stack_id "" "called update container versions()")
	/bin/mv -f $CS_ROOT/container-versions $CS_ROOT/.undo/$undoId/container-versions || return 2
	/bin/mv -f $CS_ROOT/container-versions.new $CS_ROOT/container-versions || return 2
	return 0
}

# source in the container version file.
#
# This contains the versions of each docker image to use as well as optional
# docker hub repo names. Default repo names will be those for GA (master)
#
# args:
#   undoId    optional undo stack Id
function load_container_versions {
	local undoId="$1"
	[ ! -f $CS_ROOT/container-versions ] && { update_container_versions "$undoId" "called load_container_versions()" || exit 1; }
	apiRepo=""
	broadcasterRepo=""
	mailoutRepo=""
	rabbitmqRepo=""
	pythonRepo=""
	opadmRepo=""
	. $CS_ROOT/container-versions || exit 1
	[ -z "$apiRepo" ] && apiRepo="teamcodestream/api-onprem"
	[ -z "$broadcasterRepo" ] && broadcasterRepo="teamcodestream/broadcaster-onprem"
	[ -z "$mailoutRepo" ] && mailoutRepo="teamcodestream/mailout-onprem"
	[ -z "$rabbitmqRepo" ] && rabbitmqRepo="teamcodestream/rabbitmq-onprem"
	[ -z "$pythonRepo" ] && pythonRepo="teamcodestream/dt-python3"
	[ $CS_USE_ADMIN -eq 1 ] && [ -z "$opadmRepo" ] && opadmRepo="teamcodestream/opadm-onprem"
}

# Execute the docker update procedure
function update_containers_except_mongo {
	local parm nostart nobackup force
	for parm in "$@"; do
		[ $parm == "--no-start" ] && nostart=1
		[ $parm == "--no-backup" ] && nobackup=1
		[ $parm == "--force" ] && force=1
		# [ $parm == "--package" ] && CS_INSTALL_FROM_PKG=yes
	done
	local undoId=$(undo_stack_id "" "full container update procedure")
	stop_containers --not-mongo
	[ -z "$nobackup" ] && { backup_dot_codestream $undoId && backup_mongo $CS_MONGO_URL $undoId || exit 1; }
	remove_containers --not-mongo
	update_container_versions $undoId
	local rc=$?
	[ $rc -eq 2 ] && echo "error updating containers">&2 && exit 1
	if [ $rc -eq 0  -o  -n "$force" ]; then
		load_container_versions $undoId
		[ -n "$CS_INSTALL_FROM_PKG" ] && load_docker_containers_from_package
		# update_config_file $undoId
	else
		echo "You are already running the latest container versions"
	fi
	[ -z "$nostart" ] && start_containers
}



############################################################
## Undo Stack
############################################################

# generate an undo stack Id and creates its directory
#
# An undo stack Id is a top leveel directory in $CS_ROOT/.undo/ where we
# keep backups of all the files we will need to undo the current transaction.
#
# args:
#     undoId      optional Id - if not provided one will be generated
#     eventDesc   brief description of this undo transaction
#
# returns:
#     prints undoId on stdout
function undo_stack_id {
	local undoId="$1"
	local eventDesc="$2"
	[ -z "$eventDesc" ] && eventDesc="no description"
	if [ "$undoId" == latest ]; then
		undoId=`(cd $CS_ROOT/.undo && /bin/ls |tail -1)`
	elif [ -z "$undoId" ]; then
		undoId=`date '+%Y-%m-%d_%H-%M-%S'`
	fi
	[ ! -d $CS_ROOT/.undo/$undoId ] && mkdir -p $CS_ROOT/.undo/$undoId
	echo "$eventDesc" >$CS_ROOT/.undo/$undoId/description
	echo $undoId
}

function print_undo_stack {
	[ ! -d $CS_ROOT/.undo ] && echo "the undo stack is empty" >&2 && return
	for u in `ls $CS_ROOT/.undo`; do
		echo "  $u   `cat $CS_ROOT/.undo/$u/description`"
	done
}


############################################################
## MongoDB Utilities & Backups
############################################################

# backup the contents of the $CS_ROOT directory tree into the undo stack
function backup_dot_codestream {
	local undoId="$1"
	[ -z "$undoId" ] && undoId=$(undo_stack_id "" "called backup_dot_codestream()")
	tar -C $CS_ROOT -czpf $CS_ROOT/.undo/$undoId/dot.codestream.tgz  --exclude='backups*' --exclude='.undo*' --exclude='log-capture*' .
}

function backup_mongo {
	local mongoUrl="$1"
	local undoId="$2"
	[ ! -d $CS_ROOT/backups ] && mkdir $CS_ROOT/backups
	local filename="dump_$(date '+%Y-%m-%d_%H-%M-%S').gz"
	# echo "docker run --rm mongo:$mongoDockerVersion mongodump --host $host --archive --gzip"
	# docker run --rm mongo:$mongoDockerVersion mongodump --host $host --archive --gzip | cat > $CS_ROOT/backups/$filename
	docker run --rm --network=host mongo:$mongoDockerVersion mongodump --uri $mongoUrl --archive --gzip | cat > $CS_ROOT/backups/$filename
	[ $? -ne 0 -o \( ! -s $CS_ROOT/backups/$filename \) ] && echo "backup failed" >&2 && return 1
	echo "Backed up to $CS_ROOT/backups/$filename"
	return 0
}

function restore_mongo {
	local mongoUrl=$1 file=$2 prompt=$3
	[ -z "$file" ] && echo "usage: $0 --restore { latest | /path/to/dumpfile }" >&2 && return 1
	[ ! -f "$file" ] && echo "$file not found" >&2 && return 1
	echo "Restoring data from $file"
	echo -e "
  ***  WARNING   WARNING   WARNING  ***

  This will overwrite the data currently in mongo and replace it with the
  data from the backup file. The data currently in mongo will be lost!!
"
	if [ "$prompt" != no ]; then
		yesno "Do you want to proceed (y/N)? "
		[ $? -eq 0 ] && echo "never mind" && return 1
	fi
	# cat $file | docker run --rm -i mongo:$mongoDockerVersion mongorestore --host $host --archive --gzip --drop
	cat $file | docker run --rm -i --network=host mongo:$mongoDockerVersion mongorestore --uri $mongoUrl --archive --gzip --drop
	[ $? -ne 0 ] && echo "error restoring data!!" >&2 && return 1
	return 0
}

function full_backup {
	csRootBase=`basename $CS_ROOT`
	{ backup_mongo $CS_MONGO_URL && d=`/bin/ls -tr $CS_ROOT/backups|tail -1|cut -f1 -d.|sed -e 's/dump_//'` && cd $CS_ROOT/.. && tar -czpf ~/full-codestream-backup.$d.tgz $csRootBase && echo -e "\nFull backup is here:" && /bin/ls -l ~/full-codestream-backup.$d.tgz || exit 1; }
}


############################################################
## Container Execution Utilities
############################################################

# execute a utility script included within an API container
function run_script_via_api {
	local script_name=$1
	[ -z "$script_name" ] && "script name required" && return 1
	shift
	echo docker run --rm -v $CS_ROOT:/opt/config --network=host $apiRepo:$apiDockerVersion node /opt/api/codestream-server/$script_name "$@"
	docker run --rm -v $CS_ROOT:/opt/config --network=host $apiRepo:$apiDockerVersion node /opt/api/codestream-server/$script_name "$@"
	return $?
}

# execute a api_server/bin/ script in an API container
function run_api_utility {
	local util_name=$1
	shift
	run_script_via_api api_server/bin/$util_name "$@"
	return $?
}

function run_python_script {
	# this reports results to stdout so redirect other msgs to stderr
	[ $CS_DEBUG_MODE -eq 1 ] && echo "docker run --rm  --network=host -v $CS_ROOT:/cs $pythonRepo:$dtPython3DockerVersion $*" >&2
	docker run --rm  --network=host -v $CS_ROOT:/cs $pythonRepo:$dtPython3DockerVersion $*
}

# execute a script residing on the host OS disk using an API container
function run_support_script_via_api {
	local script_name=$1
	[ -z "$script_name" ] && "script name required" && return 1
	script_name=`basename $script_name`
	[ ! -d $CS_ROOT/support ] && { mkdir $CS_ROOT/support || return 1; }
	[ ! -f $CS_ROOT/support/$script_name ] && { echo "$CS_ROOT/support/$script_name not found" && return 1; }
	docker run --rm -v $CS_ROOT:/opt/config --network=host $apiRepo:$apiDockerVersion node /opt/config/support/`basename $script_name`
	return $?
}

function api_interactive {
	echo docker run -it --rm -v $CS_ROOT:/opt/config --network=host $apiRepo:$apiDockerVersion /bin/bash "$@"
	docker run -it --rm -v $CS_ROOT:/opt/config --network=host $apiRepo:$apiDockerVersion /bin/bash "$@"
	exit $?
}


############################################################
## Container Control
############################################################

# determine a container's state and report it on stdout
function container_state {
	local container=$1
	docker inspect --format='{{.State.Status}}' $container  2>/dev/null|grep -v '^[[:blank:]]*$'
}

# report container and volume status
function docker_status {
	docker ps -a|egrep -e '[[:blank:]]cs|NAME'
	echo
	docker volume ls -f name=csmongodata
}

# start up a container regardless if it already exists
# extra parms are sent to docker run command
function run_or_start_container {
	local container=$1
	local state=$(container_state $container)
	shift
	[ "$state" == "running" ] && echo "Container $container is already running" >&2 && return
	if [ "$state" == "exited" ]; then
		echo "docker start $container"
		docker start $container
		return
	fi
	local containerEnv=""
	[ $CS_USE_ADMIN -eq 1 -a -f $CS_ROOT/.container-run-params ] && containerEnv=`cat $CS_ROOT/.container-run-params`
	[ $CS_USE_ADMIN -eq 1 ] && containerEnv="$containerEnv --env CSSVC_CFG_URL=$CS_MONGO_URL --env CSSVC_CFG_FILE" && export CSSVC_CFG_FILE=""
	[ -n "$state" ] && echo "Container $container is in an unknown state ($state). Aborting" >&2 && return
	echo "running container $container (docker run)"
	case $container in
		csmongo)
			echo docker run -d -P --network="host" -v csmongodata:/data/db --name csmongo mongo:$mongoDockerVersion
			docker run -d -P --network="host" -v csmongodata:/data/db --name csmongo mongo:$mongoDockerVersion;;
		csrabbitmq)
			echo docker run -d -P --network="host" --name csrabbitmq "$@" $rabbitmqRepo:$rabbitDockerVersion
			docker run -d -P --network="host" --name csrabbitmq "$@" $rabbitmqRepo:$rabbitDockerVersion;;
		csapi)
			echo docker run -d -P -v $CS_ROOT:/opt/config --network="host" --name csapi $containerEnv "$@" $apiRepo:$apiDockerVersion
			docker run -d -P -v $CS_ROOT:/opt/config --network="host" --name csapi $containerEnv "$@" $apiRepo:$apiDockerVersion;;
		csbcast)
			echo docker run -d -P -v $CS_ROOT:/opt/config --network="host" --name csbcast $containerEnv "$@" $broadcasterRepo:$broadcasterDockerVersion
			docker run -d -P -v $CS_ROOT:/opt/config --network="host" --name csbcast $containerEnv "$@" $broadcasterRepo:$broadcasterDockerVersion;;
		csmailout)
			echo docker run -d -P -v $CS_ROOT:/opt/config --network="host" --name csmailout $containerEnv "$@" $mailoutRepo:$mailoutDockerVersion
			docker run -d -P -v $CS_ROOT:/opt/config --network="host" --name csmailout $containerEnv "$@" $mailoutRepo:$mailoutDockerVersion;;
		csadmin)
			echo docker run -d -P -v $CS_ROOT:/opt/config --network="host" --name csadmin $containerEnv "$@" $opadmRepo:$opadmDockerVersion
			docker run -d -P -v $CS_ROOT:/opt/config --network="host" --name csadmin $containerEnv "$@" $opadmRepo:$opadmDockerVersion;;
		*)
			echo "don't know how to start container $container" >&2
			return;;
	esac
}

# high-level routine to startup all containers
function start_containers {
	local flags="$1"
	[ -n "$1" ] && shift    # the rest of the parms will be passed to the API server
	[ "$CS_DEBUG_MODE" -eq 1 ] && echo "start_containers(): $flags , $*"
	if [ $CS_RUN_MONGO -eq 1  -a  "$flags" != "--not-mongo" ]; then
		run_or_start_container csmongo
		sleep 5
	fi
	echo "Starting containers..."
	run_or_start_container csrabbitmq
	sleep 3
	run_or_start_container csapi "$@"
	sleep 3
	run_or_start_container csbcast
	run_or_start_container csmailout
	[ $CS_USE_ADMIN -eq 1 ] && run_or_start_container csadmin
}

# high-level routine to stop all containers
function stop_containers {
	local flags="$1"
	shift
	local containers="$CS_CONTAINERS"
	[ -n "$1" ] && flags="--not-mongo" && containers="$@"
	local c
	local state
	[ $CS_RUN_MONGO -eq 1  -a  "$flags" != "--not-mongo" ] && containers="$containers csmongo"
	echo "Stopping containers..."
	for c in $containers
	do
		state=$(container_state $c)
		# echo "container $c state: $state"
		if [ "$state" == "running" ]; then
			docker stop $c
		elif [ "$state" == "exited" ]; then
			echo "container $c is not running "
		elif [ -z "$state" ]; then
			echo "container $c not found - nothing to stop"
		else
			echo "container $c is in an unknown state ($state)"
		fi
	done
}

# high-level routine to stop all containers
function remove_containers {
	local flags="$1"
	shift
	local containers="$CS_CONTAINERS"
	[ -n "$1" ] && flags="--not-mongo" && containers="$@"
	local c
	local state
	[ $CS_RUN_MONGO -eq 1  -a  "$flags" != "--not-mongo" ] && containers="$containers csmongo"
	echo "Removing containers..."
	for c in $containers
	do
		state=$(container_state $c)
		if [ "$state" == "exited" ]; then
			docker rm $c
		elif [ -z "$state" ]; then
			echo "container $c not found - nothing to remove"
		else
			echo "container $c is in an unexpected state ($state)"
		fi
	done
	# [ $CS_RUN_MONGO -eq 1 ] && echo "docker rm csmongo" && docker rm csmongo
}

function load_docker_containers_from_package {
	echo "loading docker images from package"
	set -x
	docker load -i $CS_ROOT/.docker-images/api.$apiDockerVersion.docker || exit 1
	docker load -i $CS_ROOT/.docker-images/broadcaster.$broadcasterDockerVersion.docker || exit 1
	docker load -i $CS_ROOT/.docker-images/mailout.$mailoutDockerVersion.docker || exit 1
	[ $CS_USE_ADMIN -eq 1 ] && docker load -i $CS_ROOT/.docker-images/opadm.$opadmDockerVersion.docker || exit 1
	docker load -i $CS_ROOT/.docker-images/rabbitmq.$rabbitDockerVersion.docker || exit 1
	docker load -i $CS_ROOT/.docker-images/python.$dtPython3DockerVersion.docker || exit 1
	docker load -i $CS_ROOT/.docker-images/mongo.$mongoDockerVersion.docker || exit 1
	set +x
}



############################################################
## Installation
############################################################

# display our terms of service and require user to agree.
# returns 0 if they do agree, 1 otherwise
function accept_tos {
	[ -f $CS_ROOT/.tos-agreed ] && return 0
	local ans
	echo -n "
Before proceeding with the installation, you will need to accept our
Terms of Service. Use the space-bar, 'b' (for back) or arrow keys to
move through the pager to read the terms. Press 'q' when you're done.

You'll then need agree to the terms to continue with the installation.

Press ENTER to read our Terms of Service..."
	read ans
	if [ ! -f $CS_ROOT/terms.txt ]; then
		curl https://raw.githubusercontent.com/TeamCodeStream/onprem-install/$CS_INSTALLATION_BRANCH/docs/src/assets/terms.txt -s -o $CS_ROOT/terms.txt
		[ $? -ne 0 ] && echo "Could not locate the terms of service!" && exit 1
	fi
	less $CS_ROOT/terms.txt
	echo -n "

If you agree to these terms, please type 'i agree': "
	read ans
	ans=`echo $ans | $TR_CMD [:upper:] [:lower:]`
	[ "$ans" == "i agree" ] && touch $CS_ROOT/.tos-agreed && return 0
	return 1
}

function quickstart {
	[ -f $CS_ROOT/mongo.url ] && echo "CodeStream was already installed" && exit 1
	local _apiPort=80
	local _bcastPort=12080
	local _adminPort=8080
	local _fqhn=`hostname`
	local _mongoUrl=mongodb://localhost/codestream
	local interactive=1
	local _x
	# FIXME: would be better if we did not hard code /opt/api/
	local apiEnv="--env CS_API_DEFAULT_CFG_FILE=/opt/api/codestream-server/api_server/etc/configs/onprem-slh-quickstart.json"
	while [ $# -gt 0 ]
	do
		case $1 in
		--public-host) _fqhn=$2; apiEnv="$apiEnv --env CS_API_SET_PUBLIC_HOST=$2"; shift 2;;
		--api-port) _apiPort=$2; apiEnv="$apiEnv --env CS_API_SET_PUBLIC_PORT=$2"; shift 2;;
		--admin-port) _adminPort=$2; apiEnv="$apiEnv --env CS_API_SET_PUBLIC_ADMIN_PORT=$2"; shift 2;;
		--bcast-port) _bcastPort=$2; apiEnv="$apiEnv --env CS_API_SET_PUBLIC_BROADCASTER_PORT=$2"; shift 2;;
		--mongo-url) _mongoUrl=$2; shift 2;;
		--agree-to-terms) interactive=0; shift;;
		*) echo "bad usage"; exit 1;;
		esac
	done
	[ $interactive -eq 0 ] && touch $CS_ROOT/.tos-agreed || accept_tos
	fetch_utilities

	echo "Configuring CodeStream with these public-facing settings:
    Host             [--public-host] :    $_fqhn
    API Port         [--api-port]    :    $_apiPort
    Broadcaster Port [--bcast-port]  :    $_bcastPort
    Admin Port       [--admin-port]  :    $_adminPort"
	# Mongo URL:         $_mongoUrl    (--mongo-url)
	echo -n "
If this is not what you want, press CTRL-C and specify additional options:   $0 --quickstart [options]
"
	[ $interactive -eq 1 ] && { echo -n "Press ENTER to continue..." && read _x; } || echo "interactive mode disabled...continuing..."

	echo $_mongoUrl >$CS_ROOT/mongo.url
	export CS_MONGO_URL=$_mongoUrl
	export CS_USE_ADMIN=1

	# air-gapped installations get the docker images pre-loaded from disk
	load_container_versions
	[ -n "$CS_INSTALL_FROM_PKG" ] && load_docker_containers_from_package

	start_containers --with-mongo $apiEnv
	exit
}


############################################################
## Logs & Support
############################################################

function capture_logs {
	local since=$1
	[ -z "$since" ] && echo "bad usage: missing hours or minutes spec" && exit 1
	[ ! -d $CS_ROOT/log-capture ] && mkdir $CS_ROOT/log-capture
	local logdir=cslogs$$
	local now=`date +%Y%m%d-%H%M%S`
	tmpDir=$HOME/$logdir
	mkdir $tmpDir
	docker logs --since $since csapi >$tmpDir/api.log 2>&1
	docker logs --since $since csbcast >$tmpDir/broadcaster.log 2>&1
	docker logs --since $since csrabbitmq >$tmpDir/rabbitmq.log 2>&1
	docker logs --since $since csmailout >$tmpDir/mailout.log 2>&1
	[ $CS_USE_ADMIN -eq 1 ] && docker logs --since $since csopadm >$tmpDir/opadm.log 2>&1
	tar -czpf $CS_ROOT/log-capture/codestream-onprem-logs.$now.tgz -C $HOME $logdir
	[ -d "$tmpDir" ] && /bin/rm -rf $tmpDir
	ls -l $CS_ROOT/log-capture/codestream-onprem-logs.$now.tgz
}

# use a mongo container to run a json script using the mongo CLI
function repair_db {
	# this will execute scripts containing mongodb commands
	local fixScript=$1
	[ -z "$fixScript" ] && echo "name of fix script is required" && return 1
	fixScript=$(basename $fixScript)
	[ ! -f $CS_ROOT/$fixScript ] && echo "$CS_ROOT/$fixScript not found" >&2 && return 1
	docker run --rm --network=host -v $CS_ROOT:/cs mongo:$mongoDockerVersion mongo $CS_MONGO_URL /cs/$fixScript && echo "repair script ran successfully" || { echo "repair script indicated failure"; return 1; }
	return 0
}

# create a custom MS Teams App Package for side-loading into MST
function create_mst_app_pkg {
	local appId=$1
	local publicHostName=$2
	zipCmd=`which zip`
	[ -z "$zipCmd" ] && echo "'zip' is needed to create an MST app package. It was not found in your search path" && return 1
	[ -z "$publicHostName" ] && echo "usage: `basename $0` --create-mst-app-pkg {appId} {public-api-hostname}" && return 1
	local tmpDir="$CS_ROOT/tmp$$"
	mkdir $tmpDir || { echo "mkdir $tmpDir failed"; return 1; }
	curl -s https://assets.codestream.com/mstbot/template/manifest.json.onprem -o $tmpDir/manifest.json.onprem || { echo "failed to get manifest template"; return 1; }
	curl -s https://assets.codestream.com/mstbot/template/outline.png -o $tmpDir/outline.png || { echo "failed to get outline.png"; return 1; }
	curl -s https://assets.codestream.com/mstbot/template/color.png -o $tmpDir/color.png || { echo "failed to get color.png"; return 1; }
	cat $tmpDir/manifest.json.onprem | sed -e "s/{{botId}}/$appId/g" | sed -e "s/{{publicApiFullyQualifiedHostName}}/$publicHostName/g" > $tmpDir/manifest.json || { echo "could not expand manifest template"; return 1; }
	(cd $tmpDir && $zipCmd -q $CS_ROOT/codestream-mst-app.zip manifest.json outline.png color.png) || { echo "failed to create zip file"; return 1; }
	ls -l $CS_ROOT/codestream-mst-app.zip
	/bin/rm -rf $tmpDir
	return 0
}

# openssl command to generate a self-signed cert
function make_self_signed_cert {
	local fqhn="$1"
	[ -z "$fqhn" ] && echo "specify the hostname for your cert" && exit 1
	local opensslCmd=`which openssl`
	[ -z "$opensslCmd" ] && echo "openssl command not found - this is needed to create a self-signed cert" && exit 1
	cd $CS_ROOT || exit 1
	echo "Creating key (./$fqhn.key.pem) and self-signed cert (./$fqhn.cert.pem)"
	echo openssl req -nodes -x509 -newkey rsa:4096 -keyout $fqhn.key.pem -out $fqhn.cert.pem -days 3650 -subj \"/C=US/ST=NY/L=New York/O=Dis/CN=$fqhn\"
	openssl req -nodes -x509 -newkey rsa:4096 -keyout $fqhn.key.pem -out $fqhn.cert.pem -days 3650 -subj "/C=US/ST=NY/L=New York/O=Dis/CN=$fqhn" || return 1
	return 0
}

# optionally fetch and execute a CodeStream supplied support package.
#
# Support packages are tarballs containing custom scripts CodeStream support
# prepares for specific problems with client installations.
function apply_support_package {
	local supportPkg=$1
	shift
	local curDir=`pwd`
	[ -z "$supportPkg" ] && echo "support pacakge filename is required" && return 1
	supportPkgFile=`basename $supportPkg`

	[ ! -d $CS_ROOT/support ] && { mkdir $CS_ROOT/support || return 1; }
	local supportId=`date +%Y%m%d.%H%M%S.%s`
	local supportDir="$CS_ROOT/support/$supportId"
	echo "mkdir $supportDir" && mkdir $supportDir || return 1

	if [ "`echo $supportPkg | grep -c ^https:`" -gt 0 ]; then
		echo "curl $supportPkg -o $supportDir/$supportPkgFile -s"
		curl $supportPkg -o $supportDir/$supportPkgFile -s || { echo "could not download support package" && return 1; }
	else
		[ ! -f "$supportPkg" ] && echo "$supportPkg not found" && return 1
		/bin/cp $supportPkg $supportDir || return 1
	fi

	cd $supportDir || return 1
	tar -xzf $supportPkgFile || { echo "untar $supportPkgFile failed" && return 1; }

	[ ! -f start-here.sh ] && echo "missing start script" && return 1
	echo running package - /bin/bash ./start-here.sh "$CS_ROOT" "$@"
	/bin/bash ./start-here.sh "$CS_ROOT" "$@"
	return $?
}

function mongo_config_tool {
	local outFile="$1"
	[ ! -f $CS_ROOT/mongo.url ] && echo "installation upgrade required" && exit 1
	run_script_via_api shared/codestream_configs/bin/mongo-config-loader.js --mongo-url $CS_MONGO_URL "$@"
	exit $?
}

############################################################
## Upgrade to On-Prem Admin Server
############################################################

function upgrade_to_admin {
	[ $CS_USE_ADMIN -eq 1 ] && echo "Your installatton is already running the admin service" && exit 0
	local _mongoUrl=`grep mongodb:// $CS_ROOT/codestream-services-config.json |cut -f4 -d\" | head -1`
	local apiEnv=""
	local _publicUrlWithoutPort=`grep publicApiUrl $CS_ROOT/codestream-services-config.json | cut -f4 -d\" | cut -f1-2 -d:`
	local _apiPort=`grep publicApiUrl $CS_ROOT/codestream-services-config.json | cut -f4 -d\" | cut -f3 -d:`
	local _adminPort=8080
	echo $_publicUrlWithoutPort|grep -q ^https && _adminPort=8443
	[ "$_adminPort" == "$_apiPort" ] && $_adminPort=`expr $_adminPort + 1`
	while [ $# -gt 0 ];	do
		case $1 in
			--admin-port) _adminPort=$2; shift 2;;
			--mongo-url) _mongoUrl=$2; shift 2;;
			*) echo "bad usage"; exit 1;;
		esac
	done
	local _adminUrl="$_publicUrlWithoutPort:$_adminPort"
	echo "You are about to upgrade your CodeStream On-Prem installation to use
the new admin service which migrates your configuration into the mongo
database.

Once completed, your codestream-services-config.json file will be moved
aside and no longer relevant. Any configuration changes should be made
through the web browser app which will run on the admin port you specify.

   Admin Port       [--admin-port]  :    $_adminPort
   Mongo Url        [--mongo-url]   :    $_mongoUrl
   Admin Url                        :    $_adminUrl

If these settings are not to your liking, break out of this script (CTRL-C)
and use the command line options to change their values
"
	yesno "Do you want to proceed with these options (y/N)? " && echo "Upgrade aborted" && exit 1

	stop_containers --not-mongo
	full_backup
	remove_containers --not-mongo

	echo $_mongoUrl >$CS_ROOT/mongo.url
	export CS_MONGO_URL=$_mongoUrl
	export CS_USE_ADMIN=1
	#  load config into mongo, setting the public-facing admin port and import SSL/TLS certs/keys
	run_script_via_api shared/codestream_configs/bin/mongo-config-loader.js --mongo-url $CS_MONGO_URL --load /opt/config/codestream-services-config.json --desc "import codestream-config-services.json" --import-keys --first-cfg-hook --admin-port $_adminPort || { echo "failed to load config"; exit 1; }
	mv $CS_ROOT/codestream-services-config.json $CS_ROOT/codestream-services-config.json.loaded-into-db

	start_containers --not-mongo

	echo "Done.

Login to the admin server at $_adminUrl and setup an email address & password.

You can always see the logs with these commands:

    docker logs csapi
    docker logs csbcast
    docker logs csadmin
"
	exit 0
}


#########
#########  Execution Starts Here
#########

### ------ Globals ------

export CS_CONTAINERS="csapi csmailout csbcast csrabbitmq"

[ -z "$CS_ROOT" ] && csDir=`dirname $0` && export CS_ROOT=$(cd $csDir && pwd)

# commands that aren't the same on different os's
[ -z "$TR_CMD" ] && export TR_CMD=tr

# .onprem-install is a copy of a the onprem-install repo used for air-gapped installations
[ -d $CS_ROOT/.onprem-install ] && export CS_INSTALL_FROM_PKG=yes || export CS_INSTALL_FROM_PKG=""

# touch debug.on if you want debugging output
[ -f $CS_ROOT/debug.on ] && export CS_DEBUG_MODE=1 || export CS_DEBUG_MODE=0

# The release file determines which docker repos and image versions we use (beta, pre-release or GA (null string))
[ -f $CS_ROOT/release ] && { export CS_RELEASE_SUFX=".`cat $CS_ROOT/release`"; export CS_RELEASE_PATH="/`cat $CS_ROOT/release`"; echo "Release: `basename $CS_RELEASE_PATH`" >&2; }

# installation-branch determines which branch of onprem-install to use when downloading files (master or beta)
[ -f $CS_ROOT/installation-branch ] && { export CS_INSTALLATION_BRANCH="`cat $CS_ROOT/installation-branch`"; echo "Installation branch: $CS_INSTALLATION_BRANCH" >&2; } || export CS_INSTALLATION_BRANCH="master"

# mongo server
[ -z "$CS_MONGO_URL" ] && { [ -f $CS_ROOT/mongo.url ] && export CS_MONGO_URL=`cat $CS_ROOT/mongo.url` || export CS_MONGO_URL="mongodb://localhost/codestream"; }

# Admin server
[ -f $CS_ROOT/mongo.url ] && export CS_USE_ADMIN=1 || export CS_USE_ADMIN=0
[ $CS_USE_ADMIN -eq 1 ] && export CS_CONTAINERS="$CS_CONTAINERS csadmin"

# touch mongo.off if user-provided mongodb server
[ -f $CS_ROOT/mongo.off ] && export CS_RUN_MONGO=0 || export CS_RUN_MONGO=1

[ -n "$OPI_TOP" -a -d "$OPI_TOP/install-scripts" ] && export CS_OPI_SANDBOX=1 || export CS_OPI_SANDBOX=0

### ------ Checkout this host system for compatibility
check_env || exit 1

[ $CS_DEBUG_MODE -eq 1 ] && env | grep ^CS_

### ------ Start parsing command line options
[ "$1" == "--help" -o -z "$1" ] && usage
[ "$1" == "--quickstart" ] && { shift && quickstart "$@"; exit $?; }
[ "$1" == "--update-myself" ] && update_myself
[ ! -f $CS_ROOT/container-versions ] && echo "CodeStream On-Prem not installed" && exit 1
[ "$1" == "--undo-stack" ] && { print_undo_stack; exit $?; }
[ "$1" == "--apply-support-pkg" ] && shift && { apply_support_package "$@"; exit $?; }
[ "$1" == "--create-mst-app-pkg" ] && shift && { create_mst_app_pkg "$@"; exit $?; }
[ "$1" == "--make-self-signed-cert" ] && shift && { make_self_signed_cert "$@"; exit $?; }

load_container_versions

[ "$1" == "--api-shell" ] && shift && { api_interactive "$@"; exit $?; }
[ "$1" == "--upgrade-to-admin" ] && shift && { upgrade_to_admin "$@"; exit $?; }
[ "$1" == "--run-python-script" ] && shift && { run_python_script "$@"; exit $?; }
[ "$1" == "--run-support-script" ] && { run_support_script_via_api "$2"; exit $?; }
[ "$1" == "--run-api-utility" ] && shift && { run_api_utility "$@"; exit $?; }
[ "$1" == "--repair-db" ] && { repair_db "$2"; exit $?; }
[ "$1" == "--update-containers" ] && shift && { update_containers_except_mongo --force "$@"; exit $?; }
[ "$1" == "--logs" ] && { capture_logs "$2"; exit $?; }
[ "$1" == "--backup" ] && { backup_mongo $CS_MONGO_URL; exit $?; }
[ "$1" == "--full-backup" ] && { full_backup; exit $?; }
[ "$1" == "--restore" ] && { [ "$2" == latest ] && { { restore_mongo $CS_MONGO_URL "$(/bin/ls $CS_ROOT/backups/dump_*.gz | tail -1)"; exit $?; } || { restore_mongo $CS_MONGO_URL $2; exit $?; } } }
[ "$1" == "--cfg-tool" ] && shift && { mongo_config_tool "$@"; exit $?; }

[ "$1" == "-a" ] && echo -e "\nThe -a option is no longer avaiable.\n" && usage
[ "$1" == "--status" ] && shift && { docker_status; exit; }
[ "$1" == "--start" ] && shift && { start_containers "$@"; sleep 1; docker_status; exit; }
[ "$1" == "--stop" ] && shift && { stop_containers "$@"; exit; }
[ "$1" == "--restart" ] && shift && { stop_containers "$@"; sleep 1; start_containers "$@"; sleep 1; docker_status; exit; }
[ "$1" == "--reset" ] && shift && { stop_containers "$@"; sleep 1; remove_containers "$@"; exit; }
[ "$1" == "--start-mongo" ] && shift && { run_or_start_container csmongo; sleep 2; docker_status; exit; }

# undocumented
[ "$1" == "--run" ] && shift && { [ -n "$1" ] && run_or_start_container "$@" || echo "container name(s) required"; exit $?; }
[ "$1" == "--reset-some" ] && shift && { [ -n "$1" ] && { stop_containers "" "$@"; remove_containers "" "$@"; } || echo "container name(s) required"; exit $?; }
[ "$1" == "--replace" ] && shift && { $0 --reset-some "$@"; $0 --run "$@"; exit $?; }
[ "$1" == "--update-container-versions" ] && shift && { update_container_versions; exit $?; }

usage
